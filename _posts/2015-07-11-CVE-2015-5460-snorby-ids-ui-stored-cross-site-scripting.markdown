---
layout: post
title:  "CVE-2015-5460 – Snorby – 2.6.2 - Stored Cross-site Scripting"
date:   2015-07-15 00:00:00
categories: security cve
permalink: post/CVE-2015-5460-snorby-ids-ui-stored-cross-site-scripting/
---

### Vendor

[https://www.snorby.org/](https://www.snorby.org/ "Snorby") – **2.6.2**

> Snorby is a new and modern Snort IDS front-end. The basic fundamental concepts behind snorby are simplicity and power. The project goal is to create a free, open source and highly competitive application for network monitoring for both private and enterprise use.


### Description

During my research and testing of new `IDS (Intrusion Detection System)` like **Suricata** I've found a `Stored Cross-site Scripting` (XSS) vulnerability in **Snorby** that I want to use as web user interface for suricata. The vulnerability exists in the module for adding a new threat classification model where the user input is not correctly sanitized before being saved it on the database or for example the output is not properly filtered, before its rendering in the **event/menu** code, in this way the vector gets executed.


### Vulnerability

**CVSS Score**: 4.3 (<a href="https://nvd.nist.gov/cvss.cfm?calculator&version=2&vector=(AV:N/AC:M/Au:N/C:N/I:P/A:N)" title="CVSS v2 Vector (AV:N/AC:M/Au:N/C:N/I:P/A:N)" target="_blank">AV:N/AC:M/Au:N/C:N/I:P/A:N</a>)


The `XSS vector` is triggered in the **snorby/app/views/events/_menu.html.erb** page by the **event/menu**:

{% highlight html %}
<% @classifications.each do |cls| %>
    <% if cls.locked && cls.hotkey %>
        <%= drop_down_item "#{cls.name}<span class='shortcut'>#{cls.shortcut}</span>", '#', nil, { :class => 'classification', :"data-classification-id" => cls.id.to_i } %>
    <% else %>
        <%= drop_down_item "#{cls.name}", '#', nil, { :class => 'classification', :"data-classification-id" => cls.id.to_i } %>
    <% end %>
<% end %>
{% endhighlight %}

<!--r34dm0r3-->

### Mitigation

A simple `XSS mitigation` on rails could be the usage of the **sanitize**, for example the code below filters the xss vector by removing the onerror attribute from the image tag:

{% highlight html %}
<% @classifications.each do |cls| %
    <% if cls.locked && cls.hotkey %>
        <%= drop_down_item "#{sanitize cls.name}<span class='shortcut'>#{cls.shortcut}</span>", '#', nil, { :class => 'classification', :"data-classification-id" => cls.id.to_i } %>
    <% else %>
        <%= drop_down_item "#{sanitize cls.name}", '#', nil, { :class => 'classification', :"data-classification-id" => cls.id.to_i } %>
    <% end %>
<% end %>
{% endhighlight %}


### Solution

**Update** to the **latest** version on <a href="https://github.com/Snorby/snorby" title="GitHub - Snorby" target="_blank">GitHub</a>.


### Disclosure:

* **30-06-2015** – Vendor notification (<a href="https://github.com/Snorby/snorby/issues/377" title="GitHub Issue-377" target="_blank">GitHub Issue-377</a>)
* **30-06-2015** – CVE id requested
* **01-07-2015** – Vendor acknowledge
* **01-07-2015** – Vendor pushed a fix (commit-id: <a href="https://github.com/Snorby/snorby/commit/89d7cbcd3697c8a842f1a61b99e9a78f295798fb" title="GitHub commit-id: 89d7cbcd3697c8a842f1a61b99e9a78f295798fb" target="_blank">89d7cbcd3697c8a842f1a61b99e9a78f295798fb</a>)
* **09-07-2015** – CVE id assigned (<a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5460" title="CVE-2015-5460" target="_blank">CVE-2015-5460</a>)
* **15-07-2015** – Public disclosure


### References

* [http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5460][mitre]
* [http://seclists.org/fulldisclosure/2015/Jul/15][fulldisclosure]
* [https://github.com/Snorby/snorby/issues/377][github-issue]

[mitre]:			http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5460     "CVE-2015-5460"
[fulldisclosure]:   http://seclists.org/fulldisclosure/2015/Jul/15                  "FullDisclosure"
[github-issue]:     https://github.com/Snorby/snorby/issues/377                     "GitHub Issue-377"
